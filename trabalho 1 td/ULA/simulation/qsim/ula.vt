// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/30/2023 20:33:22"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ula
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ula_vlg_sample_tst(
	a,
	b,
	sinalMUX,
	sampler_tx
);
input [3:0] a;
input [3:0] b;
input [3:0] sinalMUX;
output sampler_tx;

reg sample;
time current_time;
always @(a or b or sinalMUX)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ula_vlg_check_tst (
	n,
	seg7,
	v,
	z,
	sampler_rx
);
input  n;
input [13:0] seg7;
input  v;
input  z;
input sampler_rx;

reg  n_expected;
reg [13:0] seg7_expected;
reg  v_expected;
reg  z_expected;

reg  n_prev;
reg [13:0] seg7_prev;
reg  v_prev;
reg  z_prev;

reg  n_expected_prev;
reg [13:0] seg7_expected_prev;
reg  v_expected_prev;
reg  z_expected_prev;

reg  last_n_exp;
reg [13:0] last_seg7_exp;
reg  last_v_exp;
reg  last_z_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	n_prev = n;
	seg7_prev = seg7;
	v_prev = v;
	z_prev = z;
end

// update expected /o prevs

always @(trigger)
begin
	n_expected_prev = n_expected;
	seg7_expected_prev = seg7_expected;
	v_expected_prev = v_expected;
	z_expected_prev = z_expected;
end



// expected n
initial
begin
	n_expected = 1'bX;
end 
// expected seg7[ 13 ]
initial
begin
	seg7_expected[13] = 1'bX;
end 
// expected seg7[ 12 ]
initial
begin
	seg7_expected[12] = 1'bX;
end 
// expected seg7[ 11 ]
initial
begin
	seg7_expected[11] = 1'bX;
end 
// expected seg7[ 10 ]
initial
begin
	seg7_expected[10] = 1'bX;
end 
// expected seg7[ 9 ]
initial
begin
	seg7_expected[9] = 1'bX;
end 
// expected seg7[ 8 ]
initial
begin
	seg7_expected[8] = 1'bX;
end 
// expected seg7[ 7 ]
initial
begin
	seg7_expected[7] = 1'bX;
end 
// expected seg7[ 6 ]
initial
begin
	seg7_expected[6] = 1'bX;
end 
// expected seg7[ 5 ]
initial
begin
	seg7_expected[5] = 1'bX;
end 
// expected seg7[ 4 ]
initial
begin
	seg7_expected[4] = 1'bX;
end 
// expected seg7[ 3 ]
initial
begin
	seg7_expected[3] = 1'bX;
end 
// expected seg7[ 2 ]
initial
begin
	seg7_expected[2] = 1'bX;
end 
// expected seg7[ 1 ]
initial
begin
	seg7_expected[1] = 1'bX;
end 
// expected seg7[ 0 ]
initial
begin
	seg7_expected[0] = 1'bX;
end 

// expected v
initial
begin
	v_expected = 1'bX;
end 

// expected z
initial
begin
	z_expected = 1'bX;
end 
// generate trigger
always @(n_expected or n or seg7_expected or seg7 or v_expected or v or z_expected or z)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected n = %b | expected seg7 = %b | expected v = %b | expected z = %b | ",n_expected_prev,seg7_expected_prev,v_expected_prev,z_expected_prev);
	$display("| real n = %b | real seg7 = %b | real v = %b | real z = %b | ",n_prev,seg7_prev,v_prev,z_prev);
`endif
	if (
		( n_expected_prev !== 1'bx ) && ( n_prev !== n_expected_prev )
		&& ((n_expected_prev !== last_n_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port n :: @time = %t",  $realtime);
		$display ("     Expected value = %b", n_expected_prev);
		$display ("     Real value = %b", n_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_n_exp = n_expected_prev;
	end
	if (
		( seg7_expected_prev[0] !== 1'bx ) && ( seg7_prev[0] !== seg7_expected_prev[0] )
		&& ((seg7_expected_prev[0] !== last_seg7_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg7[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg7_expected_prev);
		$display ("     Real value = %b", seg7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg7_exp[0] = seg7_expected_prev[0];
	end
	if (
		( seg7_expected_prev[1] !== 1'bx ) && ( seg7_prev[1] !== seg7_expected_prev[1] )
		&& ((seg7_expected_prev[1] !== last_seg7_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg7[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg7_expected_prev);
		$display ("     Real value = %b", seg7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg7_exp[1] = seg7_expected_prev[1];
	end
	if (
		( seg7_expected_prev[2] !== 1'bx ) && ( seg7_prev[2] !== seg7_expected_prev[2] )
		&& ((seg7_expected_prev[2] !== last_seg7_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg7[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg7_expected_prev);
		$display ("     Real value = %b", seg7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg7_exp[2] = seg7_expected_prev[2];
	end
	if (
		( seg7_expected_prev[3] !== 1'bx ) && ( seg7_prev[3] !== seg7_expected_prev[3] )
		&& ((seg7_expected_prev[3] !== last_seg7_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg7[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg7_expected_prev);
		$display ("     Real value = %b", seg7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg7_exp[3] = seg7_expected_prev[3];
	end
	if (
		( seg7_expected_prev[4] !== 1'bx ) && ( seg7_prev[4] !== seg7_expected_prev[4] )
		&& ((seg7_expected_prev[4] !== last_seg7_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg7[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg7_expected_prev);
		$display ("     Real value = %b", seg7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg7_exp[4] = seg7_expected_prev[4];
	end
	if (
		( seg7_expected_prev[5] !== 1'bx ) && ( seg7_prev[5] !== seg7_expected_prev[5] )
		&& ((seg7_expected_prev[5] !== last_seg7_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg7[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg7_expected_prev);
		$display ("     Real value = %b", seg7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg7_exp[5] = seg7_expected_prev[5];
	end
	if (
		( seg7_expected_prev[6] !== 1'bx ) && ( seg7_prev[6] !== seg7_expected_prev[6] )
		&& ((seg7_expected_prev[6] !== last_seg7_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg7[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg7_expected_prev);
		$display ("     Real value = %b", seg7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg7_exp[6] = seg7_expected_prev[6];
	end
	if (
		( seg7_expected_prev[7] !== 1'bx ) && ( seg7_prev[7] !== seg7_expected_prev[7] )
		&& ((seg7_expected_prev[7] !== last_seg7_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg7[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg7_expected_prev);
		$display ("     Real value = %b", seg7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg7_exp[7] = seg7_expected_prev[7];
	end
	if (
		( seg7_expected_prev[8] !== 1'bx ) && ( seg7_prev[8] !== seg7_expected_prev[8] )
		&& ((seg7_expected_prev[8] !== last_seg7_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg7[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg7_expected_prev);
		$display ("     Real value = %b", seg7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg7_exp[8] = seg7_expected_prev[8];
	end
	if (
		( seg7_expected_prev[9] !== 1'bx ) && ( seg7_prev[9] !== seg7_expected_prev[9] )
		&& ((seg7_expected_prev[9] !== last_seg7_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg7[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg7_expected_prev);
		$display ("     Real value = %b", seg7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg7_exp[9] = seg7_expected_prev[9];
	end
	if (
		( seg7_expected_prev[10] !== 1'bx ) && ( seg7_prev[10] !== seg7_expected_prev[10] )
		&& ((seg7_expected_prev[10] !== last_seg7_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg7[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg7_expected_prev);
		$display ("     Real value = %b", seg7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg7_exp[10] = seg7_expected_prev[10];
	end
	if (
		( seg7_expected_prev[11] !== 1'bx ) && ( seg7_prev[11] !== seg7_expected_prev[11] )
		&& ((seg7_expected_prev[11] !== last_seg7_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg7[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg7_expected_prev);
		$display ("     Real value = %b", seg7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg7_exp[11] = seg7_expected_prev[11];
	end
	if (
		( seg7_expected_prev[12] !== 1'bx ) && ( seg7_prev[12] !== seg7_expected_prev[12] )
		&& ((seg7_expected_prev[12] !== last_seg7_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg7[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg7_expected_prev);
		$display ("     Real value = %b", seg7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg7_exp[12] = seg7_expected_prev[12];
	end
	if (
		( seg7_expected_prev[13] !== 1'bx ) && ( seg7_prev[13] !== seg7_expected_prev[13] )
		&& ((seg7_expected_prev[13] !== last_seg7_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port seg7[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", seg7_expected_prev);
		$display ("     Real value = %b", seg7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_seg7_exp[13] = seg7_expected_prev[13];
	end
	if (
		( v_expected_prev !== 1'bx ) && ( v_prev !== v_expected_prev )
		&& ((v_expected_prev !== last_v_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port v :: @time = %t",  $realtime);
		$display ("     Expected value = %b", v_expected_prev);
		$display ("     Real value = %b", v_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_v_exp = v_expected_prev;
	end
	if (
		( z_expected_prev !== 1'bx ) && ( z_prev !== z_expected_prev )
		&& ((z_expected_prev !== last_z_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port z :: @time = %t",  $realtime);
		$display ("     Expected value = %b", z_expected_prev);
		$display ("     Real value = %b", z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_z_exp = z_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ula_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [3:0] a;
reg [3:0] b;
reg [3:0] sinalMUX;
// wires                                               
wire n;
wire [13:0] seg7;
wire v;
wire z;

wire sampler;                             

// assign statements (if any)                          
ula i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.b(b),
	.n(n),
	.seg7(seg7),
	.sinalMUX(sinalMUX),
	.v(v),
	.z(z)
);
// sinalMUX[ 3 ]
initial
begin
	sinalMUX[3] = 1'b0;
	sinalMUX[3] = #400000 1'b1;
	sinalMUX[3] = #400000 1'b0;
end 
// sinalMUX[ 2 ]
initial
begin
	repeat(2)
	begin
		sinalMUX[2] = 1'b0;
		sinalMUX[2] = #200000 1'b1;
		# 200000;
	end
	sinalMUX[2] = 1'b0;
end 
// sinalMUX[ 1 ]
always
begin
	sinalMUX[1] = 1'b0;
	sinalMUX[1] = #100000 1'b1;
	#100000;
end 
// sinalMUX[ 0 ]
always
begin
	sinalMUX[0] = 1'b0;
	sinalMUX[0] = #50000 1'b1;
	#50000;
end 
// a[ 3 ]
initial
begin
	a[3] = 1'b0;
	a[3] = #400000 1'b1;
	a[3] = #400000 1'b0;
end 
// a[ 2 ]
initial
begin
	repeat(2)
	begin
		a[2] = 1'b0;
		a[2] = #200000 1'b1;
		# 200000;
	end
	a[2] = 1'b0;
end 
// a[ 1 ]
always
begin
	a[1] = 1'b0;
	a[1] = #100000 1'b1;
	#100000;
end 
// a[ 0 ]
always
begin
	a[0] = 1'b0;
	a[0] = #50000 1'b1;
	#50000;
end 
// b[ 3 ]
initial
begin
	repeat(2)
	begin
		b[3] = 1'b0;
		b[3] = #200000 1'b1;
		# 200000;
	end
	b[3] = 1'b0;
end 
// b[ 2 ]
always
begin
	b[2] = 1'b0;
	b[2] = #100000 1'b1;
	#100000;
end 
// b[ 1 ]
always
begin
	b[1] = 1'b0;
	b[1] = #50000 1'b1;
	#50000;
end 
// b[ 0 ]
always
begin
	b[0] = 1'b0;
	b[0] = #25000 1'b1;
	#25000;
end 

ula_vlg_sample_tst tb_sample (
	.a(a),
	.b(b),
	.sinalMUX(sinalMUX),
	.sampler_tx(sampler)
);

ula_vlg_check_tst tb_out(
	.n(n),
	.seg7(seg7),
	.v(v),
	.z(z),
	.sampler_rx(sampler)
);
endmodule

