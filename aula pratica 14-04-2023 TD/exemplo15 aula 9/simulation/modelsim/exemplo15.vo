// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// VENDOR "Altera"
// PROGRAM "Quartus II 64-Bit"
// VERSION "Version 13.0.1 Build 232 06/12/2013 Service Pack 1 SJ Web Edition"

// DATE "04/21/2023 16:18:55"

// 
// Device: Altera EP4CGX15BF14C6 Package FBGA169
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module exemplo15 (
	clear,
	d,
	load,
	clock,
	q);
input 	clear;
input 	d;
input 	load;
input 	clock;
output 	q;

// Design Ports Information
// q	=>  Location: PIN_D11,	 I/O Standard: 2.5 V,	 Current Strength: Default
// d	=>  Location: PIN_E13,	 I/O Standard: 2.5 V,	 Current Strength: Default
// load	=>  Location: PIN_D12,	 I/O Standard: 2.5 V,	 Current Strength: Default
// clock	=>  Location: PIN_E10,	 I/O Standard: 2.5 V,	 Current Strength: Default
// clear	=>  Location: PIN_D10,	 I/O Standard: 2.5 V,	 Current Strength: Default


wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \load~input_o ;
wire \q~output_o ;
wire \clock~input_o ;
wire \d~input_o ;
wire \q_temp~0_combout ;
wire \clear~input_o ;
wire \q_temp~q ;


// Location: IOIBUF_X33_Y28_N8
cycloneiv_io_ibuf \load~input (
	.i(load),
	.ibar(gnd),
	.o(\load~input_o ));
// synopsys translate_off
defparam \load~input .bus_hold = "false";
defparam \load~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOOBUF_X33_Y28_N2
cycloneiv_io_obuf \q~output (
	.i(\q_temp~q ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\q~output_o ),
	.obar());
// synopsys translate_off
defparam \q~output .bus_hold = "false";
defparam \q~output .open_drain_output = "false";
// synopsys translate_on

// Location: IOIBUF_X33_Y27_N1
cycloneiv_io_ibuf \clock~input (
	.i(clock),
	.ibar(gnd),
	.o(\clock~input_o ));
// synopsys translate_off
defparam \clock~input .bus_hold = "false";
defparam \clock~input .simulate_z_as = "z";
// synopsys translate_on

// Location: IOIBUF_X33_Y25_N8
cycloneiv_io_ibuf \d~input (
	.i(d),
	.ibar(gnd),
	.o(\d~input_o ));
// synopsys translate_off
defparam \d~input .bus_hold = "false";
defparam \d~input .simulate_z_as = "z";
// synopsys translate_on

// Location: LCCOMB_X32_Y27_N0
cycloneiv_lcell_comb \q_temp~0 (
// Equation(s):
// \q_temp~0_combout  = (\load~input_o  & ((\d~input_o ))) # (!\load~input_o  & (\q_temp~q ))

	.dataa(\load~input_o ),
	.datab(gnd),
	.datac(\q_temp~q ),
	.datad(\d~input_o ),
	.cin(gnd),
	.combout(\q_temp~0_combout ),
	.cout());
// synopsys translate_off
defparam \q_temp~0 .lut_mask = 16'hFA50;
defparam \q_temp~0 .sum_lutc_input = "datac";
// synopsys translate_on

// Location: IOIBUF_X33_Y27_N8
cycloneiv_io_ibuf \clear~input (
	.i(clear),
	.ibar(gnd),
	.o(\clear~input_o ));
// synopsys translate_off
defparam \clear~input .bus_hold = "false";
defparam \clear~input .simulate_z_as = "z";
// synopsys translate_on

// Location: FF_X32_Y27_N1
dffeas q_temp(
	.clk(\clock~input_o ),
	.d(\q_temp~0_combout ),
	.asdata(vcc),
	.clrn(!\clear~input_o ),
	.aload(gnd),
	.sclr(gnd),
	.sload(gnd),
	.ena(vcc),
	.devclrn(devclrn),
	.devpor(devpor),
	.q(\q_temp~q ),
	.prn(vcc));
// synopsys translate_off
defparam q_temp.is_wysiwyg = "true";
defparam q_temp.power_up = "low";
// synopsys translate_on

assign q = \q~output_o ;

endmodule
