// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/05/2023 17:51:28"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    teste
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module teste_vlg_sample_tst(
	CLEAR,
	CLOCK,
	CRES_DECRES,
	entrada_digite,
	HOLD,
	LOAD,
	sampler_tx
);
input  CLEAR;
input  CLOCK;
input  CRES_DECRES;
input [5:0] entrada_digite;
input  HOLD;
input  LOAD;
output sampler_tx;

reg sample;
time current_time;
always @(CLEAR or CLOCK or CRES_DECRES or entrada_digite or HOLD or LOAD)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module teste_vlg_check_tst (
	MIN,
	SEGs,
	sampler_rx
);
input [5:0] MIN;
input [5:0] SEGs;
input sampler_rx;

reg [5:0] MIN_expected;
reg [5:0] SEGs_expected;

reg [5:0] MIN_prev;
reg [5:0] SEGs_prev;

reg [5:0] MIN_expected_prev;
reg [5:0] SEGs_expected_prev;

reg [5:0] last_MIN_exp;
reg [5:0] last_SEGs_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	MIN_prev = MIN;
	SEGs_prev = SEGs;
end

// update expected /o prevs

always @(trigger)
begin
	MIN_expected_prev = MIN_expected;
	SEGs_expected_prev = SEGs_expected;
end


// expected MIN[ 5 ]
initial
begin
	MIN_expected[5] = 1'bX;
end 
// expected MIN[ 4 ]
initial
begin
	MIN_expected[4] = 1'bX;
end 
// expected MIN[ 3 ]
initial
begin
	MIN_expected[3] = 1'bX;
end 
// expected MIN[ 2 ]
initial
begin
	MIN_expected[2] = 1'bX;
end 
// expected MIN[ 1 ]
initial
begin
	MIN_expected[1] = 1'bX;
end 
// expected MIN[ 0 ]
initial
begin
	MIN_expected[0] = 1'bX;
end 
// expected SEGs[ 5 ]
initial
begin
	SEGs_expected[5] = 1'bX;
end 
// expected SEGs[ 4 ]
initial
begin
	SEGs_expected[4] = 1'bX;
end 
// expected SEGs[ 3 ]
initial
begin
	SEGs_expected[3] = 1'bX;
end 
// expected SEGs[ 2 ]
initial
begin
	SEGs_expected[2] = 1'bX;
end 
// expected SEGs[ 1 ]
initial
begin
	SEGs_expected[1] = 1'bX;
end 
// expected SEGs[ 0 ]
initial
begin
	SEGs_expected[0] = 1'bX;
end 
// generate trigger
always @(MIN_expected or MIN or SEGs_expected or SEGs)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected MIN = %b | expected SEGs = %b | ",MIN_expected_prev,SEGs_expected_prev);
	$display("| real MIN = %b | real SEGs = %b | ",MIN_prev,SEGs_prev);
`endif
	if (
		( MIN_expected_prev[0] !== 1'bx ) && ( MIN_prev[0] !== MIN_expected_prev[0] )
		&& ((MIN_expected_prev[0] !== last_MIN_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIN[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIN_expected_prev);
		$display ("     Real value = %b", MIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MIN_exp[0] = MIN_expected_prev[0];
	end
	if (
		( MIN_expected_prev[1] !== 1'bx ) && ( MIN_prev[1] !== MIN_expected_prev[1] )
		&& ((MIN_expected_prev[1] !== last_MIN_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIN[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIN_expected_prev);
		$display ("     Real value = %b", MIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MIN_exp[1] = MIN_expected_prev[1];
	end
	if (
		( MIN_expected_prev[2] !== 1'bx ) && ( MIN_prev[2] !== MIN_expected_prev[2] )
		&& ((MIN_expected_prev[2] !== last_MIN_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIN[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIN_expected_prev);
		$display ("     Real value = %b", MIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MIN_exp[2] = MIN_expected_prev[2];
	end
	if (
		( MIN_expected_prev[3] !== 1'bx ) && ( MIN_prev[3] !== MIN_expected_prev[3] )
		&& ((MIN_expected_prev[3] !== last_MIN_exp[3]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIN[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIN_expected_prev);
		$display ("     Real value = %b", MIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MIN_exp[3] = MIN_expected_prev[3];
	end
	if (
		( MIN_expected_prev[4] !== 1'bx ) && ( MIN_prev[4] !== MIN_expected_prev[4] )
		&& ((MIN_expected_prev[4] !== last_MIN_exp[4]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIN[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIN_expected_prev);
		$display ("     Real value = %b", MIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MIN_exp[4] = MIN_expected_prev[4];
	end
	if (
		( MIN_expected_prev[5] !== 1'bx ) && ( MIN_prev[5] !== MIN_expected_prev[5] )
		&& ((MIN_expected_prev[5] !== last_MIN_exp[5]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port MIN[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", MIN_expected_prev);
		$display ("     Real value = %b", MIN_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_MIN_exp[5] = MIN_expected_prev[5];
	end
	if (
		( SEGs_expected_prev[0] !== 1'bx ) && ( SEGs_prev[0] !== SEGs_expected_prev[0] )
		&& ((SEGs_expected_prev[0] !== last_SEGs_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEGs[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEGs_expected_prev);
		$display ("     Real value = %b", SEGs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SEGs_exp[0] = SEGs_expected_prev[0];
	end
	if (
		( SEGs_expected_prev[1] !== 1'bx ) && ( SEGs_prev[1] !== SEGs_expected_prev[1] )
		&& ((SEGs_expected_prev[1] !== last_SEGs_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEGs[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEGs_expected_prev);
		$display ("     Real value = %b", SEGs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SEGs_exp[1] = SEGs_expected_prev[1];
	end
	if (
		( SEGs_expected_prev[2] !== 1'bx ) && ( SEGs_prev[2] !== SEGs_expected_prev[2] )
		&& ((SEGs_expected_prev[2] !== last_SEGs_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEGs[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEGs_expected_prev);
		$display ("     Real value = %b", SEGs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SEGs_exp[2] = SEGs_expected_prev[2];
	end
	if (
		( SEGs_expected_prev[3] !== 1'bx ) && ( SEGs_prev[3] !== SEGs_expected_prev[3] )
		&& ((SEGs_expected_prev[3] !== last_SEGs_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEGs[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEGs_expected_prev);
		$display ("     Real value = %b", SEGs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SEGs_exp[3] = SEGs_expected_prev[3];
	end
	if (
		( SEGs_expected_prev[4] !== 1'bx ) && ( SEGs_prev[4] !== SEGs_expected_prev[4] )
		&& ((SEGs_expected_prev[4] !== last_SEGs_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEGs[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEGs_expected_prev);
		$display ("     Real value = %b", SEGs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SEGs_exp[4] = SEGs_expected_prev[4];
	end
	if (
		( SEGs_expected_prev[5] !== 1'bx ) && ( SEGs_prev[5] !== SEGs_expected_prev[5] )
		&& ((SEGs_expected_prev[5] !== last_SEGs_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SEGs[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SEGs_expected_prev);
		$display ("     Real value = %b", SEGs_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_SEGs_exp[5] = SEGs_expected_prev[5];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module teste_vlg_vec_tst();
// constants                                           
// general purpose registers
reg CLEAR;
reg CLOCK;
reg CRES_DECRES;
reg [5:0] entrada_digite;
reg HOLD;
reg LOAD;
// wires                                               
wire [5:0] MIN;
wire [5:0] SEGs;

wire sampler;                             

// assign statements (if any)                          
teste i1 (
// port map - connection between master ports and signals/registers   
	.CLEAR(CLEAR),
	.CLOCK(CLOCK),
	.CRES_DECRES(CRES_DECRES),
	.entrada_digite(entrada_digite),
	.HOLD(HOLD),
	.LOAD(LOAD),
	.MIN(MIN),
	.SEGs(SEGs)
);

// CLEAR
initial
begin
	CLEAR = 1'b0;
end 

// CLOCK
always
begin
	CLOCK = 1'b0;
	CLOCK = #5000 1'b1;
	#5000;
end 

// CRES_DECRES
initial
begin
	CRES_DECRES = 1'b0;
	CRES_DECRES = #450000 1'b1;
	CRES_DECRES = #310000 1'b0;
end 
// entrada_digite[ 5 ]
initial
begin
	entrada_digite[5] = 1'b0;
end 
// entrada_digite[ 4 ]
initial
begin
	entrada_digite[4] = 1'b0;
end 
// entrada_digite[ 3 ]
initial
begin
	entrada_digite[3] = 1'b0;
end 
// entrada_digite[ 2 ]
initial
begin
	entrada_digite[2] = 1'b1;
end 
// entrada_digite[ 1 ]
initial
begin
	entrada_digite[1] = 1'b0;
end 
// entrada_digite[ 0 ]
initial
begin
	entrada_digite[0] = 1'b0;
end 

// HOLD
initial
begin
	HOLD = 1'b0;
end 

// LOAD
initial
begin
	LOAD = 1'b1;
	LOAD = #60000 1'b0;
	LOAD = #390000 1'b1;
	LOAD = #50000 1'b0;
	LOAD = #270000 1'b1;
	LOAD = #60000 1'b0;
end 

teste_vlg_sample_tst tb_sample (
	.CLEAR(CLEAR),
	.CLOCK(CLOCK),
	.CRES_DECRES(CRES_DECRES),
	.entrada_digite(entrada_digite),
	.HOLD(HOLD),
	.LOAD(LOAD),
	.sampler_tx(sampler)
);

teste_vlg_check_tst tb_out(
	.MIN(MIN),
	.SEGs(SEGs),
	.sampler_rx(sampler)
);
endmodule

